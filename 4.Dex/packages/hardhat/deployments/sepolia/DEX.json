{
  "address": "0xaA7920C1bDE2fe46fDA8FA0b0b28508EEC0Cdd4c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenOutput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethInput",
          "type": "uint256"
        }
      ],
      "name": "EthToTokenSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityMinted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethInput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensInput",
          "type": "uint256"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityRemover",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensOutput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethOutput",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensInput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethOutput",
          "type": "uint256"
        }
      ],
      "name": "TokenToEthSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensDeposited",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "xInput",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xReserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yReserves",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenInput",
          "type": "uint256"
        }
      ],
      "name": "tokenToEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7e09d8a7a97cae88f17cb73ce2b675b11783ef81d9000e5383d852b72ab9308",
  "receipt": {
    "to": null,
    "from": "0x24e765Fcd00106D7175837848ec9073f9fEb9d8e",
    "contractAddress": "0xaA7920C1bDE2fe46fDA8FA0b0b28508EEC0Cdd4c",
    "transactionIndex": 13,
    "gasUsed": "843336",
    "logsBloom": "0x
    "blockHash": "0xc9e770905057277d7bd8089d057768e619d08d55284b297e58388565dd0c0725",
    "transactionHash": "0xf7e09d8a7a97cae88f17cb73ce2b675b11783ef81d9000e5383d852b72ab9308",
    "logs": [],
    "blockNumber": 7310387,
    "cumulativeGasUsed": "8288848",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x14a9B75d6220e6326aB7F3587f00fB51f20c804A"
  ],
  "numDeployments": 1,
  "solcInputHash": "66e46f5dbd3ca0456712aeaec4fbfd6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethInput\",\"type\":\"uint256\"}],\"name\":\"EthToTokenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethInput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensInput\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityRemover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethOutput\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensInput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethOutput\",\"type\":\"uint256\"}],\"name\":\"TokenToEthSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensDeposited\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yReserves\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInput\",\"type\":\"uint256\"}],\"name\":\"tokenToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"stevepham.eth and m00npapi.eth\",\"details\":\"We want to create an automatic market where our contract will hold reserves of both ETH and \\ud83c\\udf88 Balloons. These reserves will provide liquidity that allows anyone to swap between the assets. NOTE: functions outlined here are what work with the front end of this challenge. Also return variable names need to be specified exactly may be referenced (It may be helpful to cross reference with front-end code function calls).\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DEX Template\",\"version\":1},\"userdoc\":{\"events\":{\"EthToTokenSwap(address,uint256,uint256)\":{\"notice\":\"Emitted when ethToToken() swap transacted\"},\"LiquidityProvided(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when liquidity provided to DEX and mints LPTs.\"},\"LiquidityRemoved(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when liquidity removed from DEX and decreases LPT count within DEX.\"},\"TokenToEthSwap(address,uint256,uint256)\":{\"notice\":\"Emitted when tokenToEth() swap transacted\"}},\"kind\":\"user\",\"methods\":{\"tokenToEth(uint256)\":{\"notice\":\"sends $BAL tokens to DEX in exchange for Ether\"}},\"notice\":\"Empty DEX.sol that just outlines what features could be part of the challenge (up to you!)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEX.sol\":\"DEX\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/DEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title DEX Template\\n * @author stevepham.eth and m00npapi.eth\\n * @notice Empty DEX.sol that just outlines what features could be part of the challenge (up to you!)\\n * @dev We want to create an automatic market where our contract will hold reserves of both ETH and \\ud83c\\udf88 Balloons. These reserves will provide liquidity that allows anyone to swap between the assets.\\n * NOTE: functions outlined here are what work with the front end of this challenge. Also return variable names need to be specified exactly may be referenced (It may be helpful to cross reference with front-end code function calls).\\n */\\ncontract DEX {\\n\\t/* ========== GLOBAL VARIABLES ========== */\\n\\n\\tIERC20 token; //instantiates the imported contract\\n\\n\\tuint256 public totalLiquidity;\\n\\n\\tmapping (address => uint256) public liquidity;\\n\\n\\t/* ========== EVENTS ========== */\\n\\n\\t/**\\n\\t * @notice Emitted when ethToToken() swap transacted\\n\\t */\\n\\tevent EthToTokenSwap(\\n\\t\\taddress swapper,\\n\\t\\tuint256 tokenOutput,\\n\\t\\tuint256 ethInput\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when tokenToEth() swap transacted\\n\\t */\\n\\tevent TokenToEthSwap(\\n\\t\\taddress swapper,\\n\\t\\tuint256 tokensInput,\\n\\t\\tuint256 ethOutput\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when liquidity provided to DEX and mints LPTs.\\n\\t */\\n\\tevent LiquidityProvided(\\n\\t\\taddress liquidityProvider,\\n\\t\\tuint256 liquidityMinted,\\n\\t\\tuint256 ethInput,\\n\\t\\tuint256 tokensInput\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when liquidity removed from DEX and decreases LPT count within DEX.\\n\\t */\\n\\tevent LiquidityRemoved(\\n\\t\\taddress liquidityRemover,\\n\\t\\tuint256 liquidityWithdrawn,\\n\\t\\tuint256 tokensOutput,\\n\\t\\tuint256 ethOutput\\n\\t);\\n\\n\\t/* ========== CONSTRUCTOR ========== */\\n\\n\\tconstructor(address tokenAddr) {\\n\\t\\ttoken = IERC20(tokenAddr); //specifies the token address that will hook into the interface and be used through the variable 'token'\\n\\t}\\n\\n\\t/* ========== MUTATIVE FUNCTIONS ========== */\\n\\n\\tfunction init(uint256 tokens) public payable returns (uint256) {\\n\\t\\trequire(totalLiquidity == 0, \\\"DEX: init - already has liquidity\\\");\\n\\t\\ttotalLiquidity = address(this).balance;\\n\\t\\tliquidity[msg.sender] = totalLiquidity;\\n\\t\\trequire(token.transferFrom(msg.sender, address(this), tokens));\\n\\n\\t\\treturn totalLiquidity;\\n\\t}\\n\\n\\tfunction price(\\n\\t\\tuint256 xInput,\\n\\t\\tuint256 xReserves,\\n\\t\\tuint256 yReserves\\n\\t) public pure returns (uint256 yOutput) {\\n\\t\\tuint256 xInputWithFee = xInput * 997;\\n\\t\\tuint256 numerator = xInputWithFee * yReserves;\\n\\t\\tuint256 denominator = (xReserves * 1000) + xInputWithFee;\\n\\t\\treturn (numerator / denominator);\\n\\t}\\n\\n\\tfunction getLiquidity(address lp) public view returns (uint256) {\\n\\t\\treturn liquidity[lp];\\n\\t}\\n\\n\\tfunction ethToToken() public payable returns (uint256 tokenOutput) {\\n\\t\\trequire(msg.value > 0, \\\"Amount must be greater than 0\\\");\\n\\t\\tuint256 ethReserves  = address(this).balance - msg.value;\\n\\t\\tuint256 tokenReserves = token.balanceOf(address(this));\\n\\t\\ttokenOutput = price(msg.value, ethReserves, tokenReserves);\\n\\t\\trequire(token.transfer(msg.sender, tokenOutput), \\\"ethToToken(): Failed swap.\\\");\\n\\n\\t\\temit EthToTokenSwap(msg.sender, tokenOutput, msg.value);\\n\\t\\treturn tokenOutput;\\n\\t}\\n\\n\\t/**\\n\\t * @notice sends $BAL tokens to DEX in exchange for Ether\\n\\t */\\n\\tfunction tokenToEth(\\n\\t\\tuint256 tokenInput\\n\\t) public returns (uint256 ethOutput) {\\n\\n\\t\\trequire(tokenInput > 0, \\\"You have 0 tokens to swap.\\\");\\n\\t\\tuint256 tokenReserves = token.balanceOf(address(this));\\n\\t\\tethOutput = price(tokenInput, tokenReserves, address(this).balance);\\n\\n\\t\\trequire(ethOutput <= address(this).balance, \\\"ethToToken: insufficient ETH balance\\\");\\n\\n\\t\\trequire(token.transferFrom(msg.sender, address(this), tokenInput), \\\"tokenToEth: failed swap.\\\");\\n\\t\\t\\n\\t\\t(bool success,) = msg.sender.call{value: ethOutput}(\\\"\\\");\\n\\t\\trequire(success, \\\"ethToToken: failed to send ETH\\\");\\n\\n\\t\\temit TokenToEthSwap(msg.sender, tokenInput, ethOutput);\\n\\t\\treturn ethOutput;\\n\\t}\\n\\n\\t\\n\\tfunction deposit() public payable returns (uint256 tokensDeposited) {\\n\\t\\trequire(msg.value > 0, \\\"Can't deposit 0 ETH.\\\");\\n\\t\\tuint256 ethReserve = address(this).balance - msg.value;\\n\\t\\tuint256 tokenReserve = token.balanceOf(address(this));\\n\\t\\tuint256 tokenDeposit = ((msg.value * tokenReserve) / ethReserve) + 1;\\n\\n\\t\\tuint256 liquidityMinted = (msg.value * totalLiquidity) / ethReserve;\\n\\t\\tliquidity[msg.sender] += liquidityMinted;\\n\\t\\ttotalLiquidity += liquidityMinted;\\n\\n\\t\\trequire(token.transferFrom(msg.sender,address(this), tokenDeposit));\\n\\n\\t\\temit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenDeposit);\\n\\n\\t\\treturn tokenDeposit;\\n\\t}\\n\\n\\tfunction withdraw(\\n\\t\\tuint256 amount\\n\\t) public returns (uint256 ethAmount, uint256 tokenAmount) {\\n\\n\\t\\trequire(liquidity[msg.sender] >= amount, \\\"Not enough liquidity to withdraw\\\");\\n\\n\\t\\tuint256 ethReserves = address(this).balance;\\n\\n\\t\\tuint256 tokenReserves = token.balanceOf(address(this));\\n\\n\\t\\tuint256 ethAmountWithdrawn = (amount * ethReserves) / totalLiquidity;\\n\\n\\t\\tuint256 tokenAmountWithdrawn = (amount * tokenReserves) / totalLiquidity;\\n\\n\\t\\tliquidity[msg.sender] = liquidity[msg.sender] - ethAmountWithdrawn;\\n\\n\\t\\ttotalLiquidity = totalLiquidity - ethAmountWithdrawn;\\n\\n\\t\\t(bool sent,) = payable(msg.sender).call{value: ethAmountWithdrawn}(\\\"\\\");\\n\\t\\trequire(sent,\\\"Withdrawal Failed\\\");\\n\\n\\t\\trequire(token.transfer(msg.sender, tokenAmountWithdrawn));\\n\\n\\t\\temit LiquidityRemoved(msg.sender,amount, tokenAmountWithdrawn, ethAmountWithdrawn);\\n\\n\\t\\treturn (ethAmountWithdrawn, tokenAmountWithdrawn);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf71606e8803351012047fb3725968479a8b9dccbba04291b4c1b8cee605726e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e6e380380610e6e83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610ddb806100936000396000f3fe6080604052600436106100865760003560e01c8063789770f411610059578063789770f414610129578063a747b93b14610131578063b7b0422d14610167578063b8c876b11461017a578063d0e30db0146101a757600080fd5b806315770f921461008b5780632071a9f4146100b45780632e1a7d4d146100d457806370b2a30f14610109575b600080fd5b34801561009757600080fd5b506100a160015481565b6040519081526020015b60405180910390f35b3480156100c057600080fd5b506100a16100cf366004610c7a565b6101af565b3480156100e057600080fd5b506100f46100ef366004610ca6565b6101fe565b604080519283526020830191909152016100ab565b34801561011557600080fd5b506100a1610124366004610ca6565b6104aa565b6100a161077a565b34801561013d57600080fd5b506100a161014c366004610cbf565b6001600160a01b031660009081526002602052604090205490565b6100a1610175366004610ca6565b61095c565b34801561018657600080fd5b506100a1610195366004610cbf565b60026020526000908152604090205481565b6100a1610a5f565b6000806101be856103e5610d05565b905060006101cc8483610d05565b90506000826101dd876103e8610d05565b6101e79190610d22565b90506101f38183610d35565b979650505050505050565b3360009081526002602052604081205481908311156102645760405162461bcd60e51b815260206004820181905260248201527f4e6f7420656e6f756768206c697175696469747920746f20776974686472617760448201526064015b60405180910390fd5b600080546040516370a0823160e01b81523060048201524792916001600160a01b0316906370a0823190602401602060405180830381865afa1580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d29190610d57565b9050600060015483876102e59190610d05565b6102ef9190610d35565b9050600060015483886103029190610d05565b61030c9190610d35565b3360009081526002602052604090205490915061032a908390610d70565b33600090815260026020526040902055600154610348908390610d70565b600155604051600090339084908381818185875af1925050503d806000811461038d576040519150601f19603f3d011682016040523d82523d6000602084013e610392565b606091505b50509050806103d75760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0811985a5b1959607a1b604482015260640161025b565b60005460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044c9190610d83565b61045557600080fd5b60408051338152602081018a9052908101839052606081018490527f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060800160405180910390a15090969095509350505050565b60008082116104fb5760405162461bcd60e51b815260206004820152601a60248201527f596f752068617665203020746f6b656e7320746f20737761702e000000000000604482015260640161025b565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190610d57565b90506105758382476101af565b9150478211156105d35760405162461bcd60e51b8152602060048201526024808201527f657468546f546f6b656e3a20696e73756666696369656e74204554482062616c604482015263616e636560e01b606482015260840161025b565b6000546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e9190610d83565b61069a5760405162461bcd60e51b815260206004820152601860248201527f746f6b656e546f4574683a206661696c656420737761702e0000000000000000604482015260640161025b565b604051600090339084908381818185875af1925050503d80600081146106dc576040519150601f19603f3d011682016040523d82523d6000602084013e6106e1565b606091505b50509050806107325760405162461bcd60e51b815260206004820152601e60248201527f657468546f546f6b656e3a206661696c656420746f2073656e64204554480000604482015260640161025b565b60408051338152602081018690529081018490527f472303b1e7ca7d00fb77f255c0a8c577f9ca4264c0306aaed3ff18e831523a6d9060600160405180910390a15050919050565b60008034116107cb5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161025b565b60006107d73447610d70565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108499190610d57565b90506108563483836101af565b60005460405163a9059cbb60e01b8152336004820152602481018390529194506001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190610d83565b6109185760405162461bcd60e51b815260206004820152601a60248201527f657468546f546f6b656e28293a204661696c656420737761702e000000000000604482015260640161025b565b6040805133815260208101859052348183015290517f6d4870e9281c01ea54a4420c8684ac713b77f0c590b40c4b1fbf4c6ba892ccea9181900360600190a1505090565b60006001546000146109ba5760405162461bcd60e51b815260206004820152602160248201527f4445583a20696e6974202d20616c726561647920686173206c697175696469746044820152607960f81b606482015260840161025b565b47600181905533600081815260026020526040808220939093555491516323b872dd60e01b81526004810191909152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e9190610d83565b610a5757600080fd5b505060015490565b6000803411610aa75760405162461bcd60e51b815260206004820152601460248201527321b0b713ba103232b837b9b4ba10181022aa241760611b604482015260640161025b565b6000610ab33447610d70565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b259190610d57565b9050600082610b348334610d05565b610b3e9190610d35565b610b49906001610d22565b905060008360015434610b5c9190610d05565b610b669190610d35565b33600090815260026020526040812080549293508392909190610b8a908490610d22565b925050819055508060016000828254610ba39190610d22565b90915550506000546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c239190610d83565b610c2c57600080fd5b604080513381526020810183905234818301526060810184905290517f3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f5009181900360800190a1509392505050565b600080600060608486031215610c8f57600080fd5b505081359360208301359350604090920135919050565b600060208284031215610cb857600080fd5b5035919050565b600060208284031215610cd157600080fd5b81356001600160a01b0381168114610ce857600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d1c57610d1c610cef565b92915050565b80820180821115610d1c57610d1c610cef565b600082610d5257634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610d6957600080fd5b5051919050565b81810381811115610d1c57610d1c610cef565b600060208284031215610d9557600080fd5b81518015158114610ce857600080fdfea2646970667358221220cab3851bfabeafce33152e52db84237e5b51735878ca62b97a47a437dc07956864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063789770f411610059578063789770f414610129578063a747b93b14610131578063b7b0422d14610167578063b8c876b11461017a578063d0e30db0146101a757600080fd5b806315770f921461008b5780632071a9f4146100b45780632e1a7d4d146100d457806370b2a30f14610109575b600080fd5b34801561009757600080fd5b506100a160015481565b6040519081526020015b60405180910390f35b3480156100c057600080fd5b506100a16100cf366004610c7a565b6101af565b3480156100e057600080fd5b506100f46100ef366004610ca6565b6101fe565b604080519283526020830191909152016100ab565b34801561011557600080fd5b506100a1610124366004610ca6565b6104aa565b6100a161077a565b34801561013d57600080fd5b506100a161014c366004610cbf565b6001600160a01b031660009081526002602052604090205490565b6100a1610175366004610ca6565b61095c565b34801561018657600080fd5b506100a1610195366004610cbf565b60026020526000908152604090205481565b6100a1610a5f565b6000806101be856103e5610d05565b905060006101cc8483610d05565b90506000826101dd876103e8610d05565b6101e79190610d22565b90506101f38183610d35565b979650505050505050565b3360009081526002602052604081205481908311156102645760405162461bcd60e51b815260206004820181905260248201527f4e6f7420656e6f756768206c697175696469747920746f20776974686472617760448201526064015b60405180910390fd5b600080546040516370a0823160e01b81523060048201524792916001600160a01b0316906370a0823190602401602060405180830381865afa1580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d29190610d57565b9050600060015483876102e59190610d05565b6102ef9190610d35565b9050600060015483886103029190610d05565b61030c9190610d35565b3360009081526002602052604090205490915061032a908390610d70565b33600090815260026020526040902055600154610348908390610d70565b600155604051600090339084908381818185875af1925050503d806000811461038d576040519150601f19603f3d011682016040523d82523d6000602084013e610392565b606091505b50509050806103d75760405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0811985a5b1959607a1b604482015260640161025b565b60005460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044c9190610d83565b61045557600080fd5b60408051338152602081018a9052908101839052606081018490527f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060800160405180910390a15090969095509350505050565b60008082116104fb5760405162461bcd60e51b815260206004820152601a60248201527f596f752068617665203020746f6b656e7320746f20737761702e000000000000604482015260640161025b565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190610d57565b90506105758382476101af565b9150478211156105d35760405162461bcd60e51b8152602060048201526024808201527f657468546f546f6b656e3a20696e73756666696369656e74204554482062616c604482015263616e636560e01b606482015260840161025b565b6000546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e9190610d83565b61069a5760405162461bcd60e51b815260206004820152601860248201527f746f6b656e546f4574683a206661696c656420737761702e0000000000000000604482015260640161025b565b604051600090339084908381818185875af1925050503d80600081146106dc576040519150601f19603f3d011682016040523d82523d6000602084013e6106e1565b606091505b50509050806107325760405162461bcd60e51b815260206004820152601e60248201527f657468546f546f6b656e3a206661696c656420746f2073656e64204554480000604482015260640161025b565b60408051338152602081018690529081018490527f472303b1e7ca7d00fb77f255c0a8c577f9ca4264c0306aaed3ff18e831523a6d9060600160405180910390a15050919050565b60008034116107cb5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161025b565b60006107d73447610d70565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108499190610d57565b90506108563483836101af565b60005460405163a9059cbb60e01b8152336004820152602481018390529194506001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190610d83565b6109185760405162461bcd60e51b815260206004820152601a60248201527f657468546f546f6b656e28293a204661696c656420737761702e000000000000604482015260640161025b565b6040805133815260208101859052348183015290517f6d4870e9281c01ea54a4420c8684ac713b77f0c590b40c4b1fbf4c6ba892ccea9181900360600190a1505090565b60006001546000146109ba5760405162461bcd60e51b815260206004820152602160248201527f4445583a20696e6974202d20616c726561647920686173206c697175696469746044820152607960f81b606482015260840161025b565b47600181905533600081815260026020526040808220939093555491516323b872dd60e01b81526004810191909152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e9190610d83565b610a5757600080fd5b505060015490565b6000803411610aa75760405162461bcd60e51b815260206004820152601460248201527321b0b713ba103232b837b9b4ba10181022aa241760611b604482015260640161025b565b6000610ab33447610d70565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b259190610d57565b9050600082610b348334610d05565b610b3e9190610d35565b610b49906001610d22565b905060008360015434610b5c9190610d05565b610b669190610d35565b33600090815260026020526040812080549293508392909190610b8a908490610d22565b925050819055508060016000828254610ba39190610d22565b90915550506000546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c239190610d83565b610c2c57600080fd5b604080513381526020810183905234818301526060810184905290517f3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f5009181900360800190a1509392505050565b600080600060608486031215610c8f57600080fd5b505081359360208301359350604090920135919050565b600060208284031215610cb857600080fd5b5035919050565b600060208284031215610cd157600080fd5b81356001600160a01b0381168114610ce857600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610d1c57610d1c610cef565b92915050565b80820180821115610d1c57610d1c610cef565b600082610d5257634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610d6957600080fd5b5051919050565b81810381811115610d1c57610d1c610cef565b600060208284031215610d9557600080fd5b81518015158114610ce857600080fdfea2646970667358221220cab3851bfabeafce33152e52db84237e5b51735878ca62b97a47a437dc07956864736f6c63430008110033",
  "devdoc": {
    "author": "stevepham.eth and m00npapi.eth",
    "details": "We want to create an automatic market where our contract will hold reserves of both ETH and 🎈 Balloons. These reserves will provide liquidity that allows anyone to swap between the assets. NOTE: functions outlined here are what work with the front end of this challenge. Also return variable names need to be specified exactly may be referenced (It may be helpful to cross reference with front-end code function calls).",
    "kind": "dev",
    "methods": {},
    "title": "DEX Template",
    "version": 1
  },
  "userdoc": {
    "events": {
      "EthToTokenSwap(address,uint256,uint256)": {
        "notice": "Emitted when ethToToken() swap transacted"
      },
      "LiquidityProvided(address,uint256,uint256,uint256)": {
        "notice": "Emitted when liquidity provided to DEX and mints LPTs."
      },
      "LiquidityRemoved(address,uint256,uint256,uint256)": {
        "notice": "Emitted when liquidity removed from DEX and decreases LPT count within DEX."
      },
      "TokenToEthSwap(address,uint256,uint256)": {
        "notice": "Emitted when tokenToEth() swap transacted"
      }
    },
    "kind": "user",
    "methods": {
      "tokenToEth(uint256)": {
        "notice": "sends $BAL tokens to DEX in exchange for Ether"
      }
    },
    "notice": "Empty DEX.sol that just outlines what features could be part of the challenge (up to you!)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 84,
        "contract": "contracts/DEX.sol:DEX",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 86,
        "contract": "contracts/DEX.sol:DEX",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 90,
        "contract": "contracts/DEX.sol:DEX",
        "label": "liquidity",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}